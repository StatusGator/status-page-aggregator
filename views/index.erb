<div id="app" class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-6 text-center">Status Page Aggregator</h1>
  <table class="w-full bg-white shadow-md rounded-lg overflow-hidden">
    <thead class="bg-gray-200 text-gray-700">
      <tr>
        <th class="py-3 px-4 text-left">Service</th>
        <th class="py-3 px-4 text-left">Status</th>
        <th class="py-3 px-4 text-left">Incidents</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="status in sortedStatuses" :key="status.name" class="border-b border-gray-200 hover:bg-gray-100">
        <td class="py-3 px-4">
          <a :href="status.url" target="_blank" class="text-blue-600 hover:underline">{{ status.name }}</a>
        </td>
        <td class="py-3 px-4">
          <span v-if="status.error" class="text-red-500">
            <i class="fas fa-exclamation-circle mr-2"></i>Error
          </span>
          <span v-else :class="getStatusColor(status.status.indicator)">
            <i :class="getStatusIcon(status.status.indicator)" class="mr-2"></i>
            {{ formatIndicator(status.status.indicator) }}
          </span>
        </td>
        <td class="py-3 px-4">
          <ul v-if="status.incidents && status.incidents.length > 0">
            <li v-for="incident in status.incidents" :key="incident.id" class="mb-1">
              {{ incident.name }} - {{ incident.status }}
            </li>
          </ul>
          <span v-else class="text-green-500">No incidents</span>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<script>
new Vue({
  el: '#app',
  data: {
    statuses: []
  },
  computed: {
    sortedStatuses() {
      return this.statuses.sort((a, b) => {
        if (a.status.indicator === 'none' && b.status.indicator !== 'none') {
          return 1;
        }
        if (a.status.indicator !== 'none' && b.status.indicator === 'none') {
          return -1;
        }
        return 0;
      });
    }
  },
  mounted() {
    this.fetchStatuses();
    setInterval(this.fetchStatuses, 60000); // Refresh every minute
  },
  methods: {
    fetchStatuses() {
      fetch('/statuses')
        .then(response => response.json())
        .then(data => {
          this.statuses = data;
        });
    },
    getStatusColor(indicator) {
      switch(indicator) {
        case 'none':
          return 'text-green-500';
        case 'minor':
          return 'text-yellow-500';
        case 'major':
          return 'text-red-500';
        case 'maintenance':
          return 'text-blue-500';
        default:
          return 'text-gray-500';
      }
    },
    getStatusIcon(indicator) {
      switch(indicator) {
        case 'none':
          return 'fas fa-check-circle';
        case 'minor':
          return 'fas fa-exclamation-triangle';
        case 'major':
          return 'fas fa-times-circle';
        case 'maintenance':
          return 'fas fa-wrench';
        default:
          return 'fas fa-question-circle';
      }
    },
    formatIndicator(string) {
      if (string === 'none') { return 'Up'; }
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
  }
});
</script>
